definitions:
  models.AddProducts2Cart:
    properties:
      productId:
        type: string
      quantity:
        type: integer
      userId:
        type: string
    type: object
  models.Cart:
    properties:
      products:
        items:
          $ref: '#/definitions/models.ProductOrder'
        type: array
      totalPrice:
        type: number
      userId:
        type: string
    type: object
  models.CreateOrderReq:
    properties:
      comment:
        type: string
      contactNumber:
        type: string
      cordination:
        $ref: '#/definitions/models.Location'
      userId:
        type: string
    type: object
  models.DeleteProductsfromCartReq:
    properties:
      productId:
        type: string
      userId:
        type: string
    type: object
  models.ErrorResponse:
    properties:
      error:
        example: invalid request
        type: string
    type: object
  models.GeneralOrderResponse:
    properties:
      message:
        type: string
      status:
        type: boolean
    type: object
  models.GetAllOrdersRes:
    properties:
      orders:
        items:
          $ref: '#/definitions/models.Order'
        type: array
    type: object
  models.GetCartReq:
    properties:
      userId:
        type: string
    type: object
  models.Location:
    properties:
      latitude:
        type: string
      longtitude:
        type: string
    type: object
  models.Order:
    properties:
      cartId:
        $ref: '#/definitions/models.Cart'
      comment:
        type: string
      contactNumber:
        type: string
      cordination:
        $ref: '#/definitions/models.Location'
      createdat:
        type: string
      orderId:
        type: string
      status:
        type: string
      updatedat:
        type: string
      userId:
        type: string
    type: object
  models.ProductOrder:
    properties:
      price:
        type: number
      productId:
        type: string
      quantity:
        type: integer
    type: object
  models.UpdateCartReq:
    properties:
      productId:
        type: string
      quantity:
        type: integer
      userId:
        type: string
    type: object
  models.UpdateOrderReq:
    properties:
      orderId:
        type: string
    type: object
  productentity.CreateProductReq:
    properties:
      category:
        type: string
      name:
        type: string
    type: object
  productentity.DeleteProductReq:
    properties:
      is_deleted:
        type: boolean
      productId:
        type: string
    type: object
  productentity.ErrorResponse:
    properties:
      error:
        example: invalid request
        type: string
    type: object
  productentity.GeneralResponseProduct:
    properties:
      message:
        type: string
      status:
        type: boolean
    type: object
  productentity.GetProductsRes:
    properties:
      count:
        type: integer
      product:
        items:
          $ref: '#/definitions/productentity.Product'
        type: array
    type: object
  productentity.Product:
    properties:
      colour:
        type: string
      createdat:
        type: string
      description:
        type: string
      mainproductId:
        type: string
      photourl:
        type: string
      price:
        type: number
      productId:
        type: string
      quantity:
        type: integer
      size:
        type: integer
      updatedat:
        type: string
    type: object
info:
  contact: {}
paths:
  /carts:
    delete:
      consumes:
      - application/json
      description: DeleteCart clears all items from a user's cart.
      parameters:
      - description: User cart request
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/models.GetCartReq'
      produces:
      - application/json
      responses:
        "200":
          description: Cart deleted successfully
          schema:
            $ref: '#/definitions/models.GeneralOrderResponse'
        "403":
          description: Invalid request or deletion failed
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Delete a user's cart
      tags:
      - Cart
    get:
      consumes:
      - application/json
      description: GetCart retrieves the contents of a user's cart.
      parameters:
      - description: User ID
        in: query
        name: userId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Current cart contents
          schema:
            $ref: '#/definitions/models.Cart'
        "400":
          description: Invalid query parameters
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Get cart details
      tags:
      - Cart
    put:
      consumes:
      - application/json
      description: UpdateCart modifies the quantities or items in a user's cart.
      parameters:
      - description: Cart update payload
        in: body
        name: update
        required: true
        schema:
          $ref: '#/definitions/models.UpdateCartReq'
      produces:
      - application/json
      responses:
        "200":
          description: Updated cart contents
          schema:
            $ref: '#/definitions/models.Cart'
        "403":
          description: Invalid request or update failed
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Update cart contents
      tags:
      - Cart
  /carts/add/product:
    post:
      consumes:
      - application/json
      description: AddProduct2Cart adds one or more products to a user's shopping
        cart.
      parameters:
      - description: Products to add to cart
        in: body
        name: items
        required: true
        schema:
          $ref: '#/definitions/models.AddProducts2Cart'
      produces:
      - application/json
      responses:
        "200":
          description: Updated cart contents
          schema:
            $ref: '#/definitions/models.GeneralOrderResponse'
        "403":
          description: Invalid request or addition failed
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Add products to cart
      tags:
      - Cart
  /carts/product:
    delete:
      consumes:
      - application/json
      description: DeleteProductsFromCart removes specified products from a user's
        cart.
      parameters:
      - description: Products to remove from cart
        in: body
        name: items
        required: true
        schema:
          $ref: '#/definitions/models.DeleteProductsfromCartReq'
      produces:
      - application/json
      responses:
        "200":
          description: Updated cart contents
          schema:
            $ref: '#/definitions/models.Cart'
        "403":
          description: Invalid request or deletion failed
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Remove specific products from cart
      tags:
      - Cart
  /orders/completed:
    put:
      consumes:
      - application/json
      description: OrderCompleted updates the status of an order to completed.
      parameters:
      - description: Order completion payload
        in: body
        name: status
        required: true
        schema:
          $ref: '#/definitions/models.UpdateOrderReq'
      produces:
      - application/json
      responses:
        "200":
          description: Order marked completed
          schema:
            $ref: '#/definitions/models.Order'
        "403":
          description: Invalid request or update failed
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Mark an order as completed
      tags:
      - Orders
  /orders/create:
    post:
      consumes:
      - application/json
      description: CreateOrder accepts order details and creates a new order in the
        system.
      parameters:
      - description: Order request payload
        in: body
        name: order
        required: true
        schema:
          $ref: '#/definitions/models.CreateOrderReq'
      produces:
      - application/json
      responses:
        "201":
          description: Order created successfully
          schema:
            $ref: '#/definitions/models.Order'
        "403":
          description: Invalid request or creation failed
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Create a new order
      tags:
      - Orders
  /orders/getall:
    get:
      consumes:
      - application/json
      description: GetOrders returns a list of orders based on the provided filters.
      parameters:
      - description: Filter by customer ID
        in: query
        name: userId
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: List of orders
          schema:
            $ref: '#/definitions/models.GetAllOrdersRes'
        "400":
          description: Invalid query parameters
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Retrieve all orders
      tags:
      - Orders
  /products:
    delete:
      consumes:
      - application/json
      description: Удаляет продукт по переданному идентификатору.
      parameters:
      - description: Payload для удаления продукта
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/productentity.DeleteProductReq'
      produces:
      - application/json
      responses:
        "200":
          description: Результат удаления
          schema:
            $ref: '#/definitions/productentity.GeneralResponseProduct'
        "400":
          description: Неверный запрос
          schema:
            $ref: '#/definitions/productentity.ErrorResponse'
        "500":
          description: Внутренняя ошибка сервера
          schema:
            $ref: '#/definitions/productentity.ErrorResponse'
      summary: Delete an existing product
      tags:
      - products
    get:
      consumes:
      - application/json
      description: Получить список продуктов с фильтрацией и пагинацией
      parameters:
      - description: Поле для фильтрации (например, name, category)
        in: query
        name: field
        type: string
      - description: Значение для фильтрации
        in: query
        name: value
        type: string
      - default: 1
        description: Номер страницы
        in: query
        name: page
        type: integer
      - default: 10
        description: Размер страницы
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Успешный ответ — список продуктов
          schema:
            items:
              $ref: '#/definitions/productentity.GetProductsRes'
            type: array
        "400":
          description: Ошибка в параметрах запроса
          schema:
            $ref: '#/definitions/productentity.ErrorResponse'
        "500":
          description: Внутренняя ошибка сервера
          schema:
            $ref: '#/definitions/productentity.ErrorResponse'
      summary: List products
      tags:
      - products
    patch:
      consumes:
      - multipart/form-data
      description: Обновляет продукт по данным из тела запроса (multipart/form-data).
        Фото обновляется только если предоставлено.
      parameters:
      - description: Product ID
        in: formData
        name: id
        required: true
        type: string
      - description: Product name
        in: formData
        name: name
        type: string
      - description: Category
        in: formData
        name: category
        type: string
      - description: Description
        in: formData
        name: description
        type: string
      - description: Photo file
        in: formData
        name: photo
        type: file
      produces:
      - application/json
      responses:
        "200":
          description: Успешный ответ — обновлённый продукт
          schema:
            $ref: '#/definitions/productentity.Product'
        "400":
          description: Ошибка в данных запроса
          schema:
            $ref: '#/definitions/productentity.ErrorResponse'
        "500":
          description: Внутренняя ошибка сервера
          schema:
            $ref: '#/definitions/productentity.ErrorResponse'
      summary: Partially update an existing product
      tags:
      - products
    post:
      consumes:
      - application/json
      description: Создаёт новый продукт на основе JSON-запроса
      parameters:
      - description: Product payload
        in: body
        name: product
        required: true
        schema:
          $ref: '#/definitions/productentity.CreateProductReq'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/productentity.Product'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/productentity.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/productentity.ErrorResponse'
      summary: Create a new product
      tags:
      - products
  /products/addmodel:
    post:
      consumes:
      - multipart/form-data
      description: 'Принимает form-data: все поля AddModelReq + файл photo'
      parameters:
      - description: MainProductId
        in: formData
        name: mainproductId
        required: true
        type: string
      - description: Description
        in: formData
        name: description
        type: string
      - description: Colour
        in: formData
        name: colour
        type: string
      - description: Size
        in: formData
        name: size
        type: integer
      - description: Price
        in: formData
        name: price
        type: number
      - description: Quantity
        in: formData
        name: quantity
        type: integer
      - description: Photo file
        in: formData
        name: photo
        required: true
        type: file
      produces:
      - application/json
      responses:
        "201":
          description: Созданный товар
          schema:
            $ref: '#/definitions/productentity.Product'
        "400":
          description: Некорректный запрос
          schema:
            $ref: '#/definitions/productentity.ErrorResponse'
        "500":
          description: Ошибка сервера
          schema:
            $ref: '#/definitions/productentity.ErrorResponse'
      summary: Добавляет модель товара с фото
      tags:
      - products
swagger: "2.0"
